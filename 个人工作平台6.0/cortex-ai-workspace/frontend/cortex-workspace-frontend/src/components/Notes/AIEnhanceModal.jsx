import React, { useState } from 'react'
import { 
  Brain, 
  Sparkles, 
  Languages, 
  FileText, 
  Lightbulb,
  CheckCircle,
  Loader2,
  Copy,
  X
} from 'lucide-react'
import { Button } from '@/components/ui/button.jsx'
import { Textarea } from '@/components/ui/textarea.jsx'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog.jsx'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx'

const AIEnhanceModal = ({ isOpen, onClose, originalText, onApply }) => {
  const [selectedMode, setSelectedMode] = useState('improve')
  const [selectedModel, setSelectedModel] = useState('openai/gpt-5')
  const [enhancedText, setEnhancedText] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  // AIÂ¢ûÂº∫Ê®°ÂºèÈÖçÁΩÆ
  const enhanceModes = [
    {
      id: 'improve',
      name: 'ÊñáÊú¨ÊîπËøõ',
      icon: Sparkles,
      description: '‰ºòÂåñËØ≠Ë®ÄË°®ËææÔºåÊèêÂçáÊñáÊú¨Ë¥®Èáè',
      prompt: 'ËØ∑Â∏ÆÊàëÊîπËøõ‰ª•‰∏ãÊñáÊú¨ÁöÑË°®ËææÔºå‰ΩøÂÖ∂Êõ¥Âä†Ê∏ÖÊô∞„ÄÅÊµÅÁïÖÂíå‰∏ì‰∏öÔºö'
    },
    {
      id: 'summarize',
      name: 'ÂÜÖÂÆπÊëòË¶Å',
      icon: FileText,
      description: 'ÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØÔºåÁîüÊàêÁÆÄÊ¥ÅÊëòË¶Å',
      prompt: 'ËØ∑‰∏∫‰ª•‰∏ãÂÜÖÂÆπÁîüÊàê‰∏Ä‰∏™ÁÆÄÊ¥ÅÊòé‰∫ÜÁöÑÊëòË¶ÅÔºåÁ™ÅÂá∫ÈáçÁÇπÔºö'
    },
    {
      id: 'expand',
      name: 'ÂÜÖÂÆπÊâ©Â±ï',
      icon: Lightbulb,
      description: '‰∏∞ÂØåÂÜÖÂÆπÁªÜËäÇÔºåÂ¢ûÂä†Ê∑±Â∫¶ÂàÜÊûê',
      prompt: 'ËØ∑Â∏ÆÊàëÊâ©Â±ï‰ª•‰∏ãÂÜÖÂÆπÔºåÊ∑ªÂä†Êõ¥Â§öÁªÜËäÇÂíåÊ∑±ÂÖ•ÂàÜÊûêÔºö'
    },
    {
      id: 'translate',
      name: 'Êô∫ËÉΩÁøªËØë',
      icon: Languages,
      description: 'ÁøªËØë‰∏∫ÂÖ∂‰ªñËØ≠Ë®ÄÂπ∂‰øùÊåÅËØ≠Â¢É',
      prompt: 'ËØ∑Â∞Ü‰ª•‰∏ãÂÜÖÂÆπÁøªËØë‰∏∫Ëã±ÊñáÔºå‰øùÊåÅÂéüÊÑèÂíåËØ≠Â¢ÉÔºö'
    },
    {
      id: 'structure',
      name: 'ÁªìÊûÑ‰ºòÂåñ',
      icon: Brain,
      description: 'ÈáçÊñ∞ÁªÑÁªáÂÜÖÂÆπÁªìÊûÑÔºåÊèêÂçáÈÄªËæëÊÄß',
      prompt: 'ËØ∑Â∏ÆÊàëÈáçÊñ∞ÁªÑÁªá‰ª•‰∏ãÂÜÖÂÆπÁöÑÁªìÊûÑÔºå‰ΩøÂÖ∂Êõ¥ÊúâÈÄªËæëÊÄßÂíåÊù°ÁêÜÊÄßÔºö'
    }
  ]

  // AIÊ®°ÂûãÈÄâÈ°π
  const models = [
    { id: 'openai/gpt-5', name: 'GPT-5', provider: 'OpenAI' },
    { id: 'google/gemini-2.5-pro', name: 'Gemini 2.5 Pro', provider: 'Google' },
    { id: 'anthropic/claude-4', name: 'Claude-4', provider: 'Anthropic' },
    { id: 'deepseek/deepseek-chat-v3', name: 'DeepSeek V3', provider: 'DeepSeek' }
  ]

  const currentMode = enhanceModes.find(mode => mode.id === selectedMode)
  const currentModel = models.find(model => model.id === selectedModel)

  // Ë∞ÉÁî®AIÂ¢ûÂº∫ÂäüËÉΩ
  const handleEnhance = async () => {
    if (!originalText.trim()) {
      setError('ËØ∑ÂÖàËæìÂÖ•Ë¶ÅÂ¢ûÂº∫ÁöÑÊñáÊú¨')
      return
    }

    setLoading(true)
    setError('')
    setEnhancedText('')

    try {
      // Ê®°ÊãüAI APIË∞ÉÁî®
      const prompt = `${currentMode.prompt}\n\n${originalText}`
      
      // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÁúüÂÆûÁöÑAPIÔºåÁé∞Âú®ÂÖàÊ®°Êãü
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Ê®°Êãü‰∏çÂêåÊ®°ÂºèÁöÑÂìçÂ∫î
      let mockResponse = ''
      switch (selectedMode) {
        case 'improve':
          mockResponse = `ÁªèËøáAI‰ºòÂåñÁöÑÊñáÊú¨Ôºö\n\n${originalText}\n\n[Ê≠§Â§Ñ‰∏∫ÊîπËøõÂêéÁöÑÁâàÊú¨ÔºåËØ≠Ë®ÄÊõ¥Âä†ÊµÅÁïÖ‰∏ì‰∏öÔºåË°®ËææÊõ¥Âä†Ê∏ÖÊô∞ÂáÜÁ°Æ]`
          break
        case 'summarize':
          mockResponse = `üìù ÂÜÖÂÆπÊëòË¶ÅÔºö\n\n‚Ä¢ ‰∏ªË¶ÅËßÇÁÇπ1\n‚Ä¢ ‰∏ªË¶ÅËßÇÁÇπ2\n‚Ä¢ ÂÖ≥ÈîÆÁªìËÆ∫\n\nÊÄªÁªìÔºö${originalText.substring(0, 100)}...ÁöÑÊ†∏ÂøÉË¶ÅÁÇπ`
          break
        case 'expand':
          mockResponse = `${originalText}\n\nüìà Êâ©Â±ïÂÜÖÂÆπÔºö\n\n‚Ä¢ ËØ¶ÁªÜÂàÜÊûêÂíåËÉåÊôØ‰ø°ÊÅØ\n‚Ä¢ Áõ∏ÂÖ≥Ê°à‰æãÂíåÂÆû‰æã\n‚Ä¢ Ê∑±ÂÖ•ÊÄùËÄÉÂíåÂêØÂèë\n‚Ä¢ ÂÆûÈôÖÂ∫îÁî®Âª∫ËÆÆ`
          break
        case 'translate':
          mockResponse = `üåê Ëã±ÊñáÁøªËØëÔºö\n\n[English translation of the original text while maintaining context and meaning]\n\nÂéüÊñáÔºö${originalText}`
          break
        case 'structure':
          mockResponse = `üìã ÁªìÊûÑÂåñÂÜÖÂÆπÔºö\n\n## ‰∏ªË¶ÅÂÜÖÂÆπ\n${originalText}\n\n## ÂÖ≥ÈîÆË¶ÅÁÇπ\n1. Ë¶ÅÁÇπ‰∏Ä\n2. Ë¶ÅÁÇπ‰∫å\n3. Ë¶ÅÁÇπ‰∏â\n\n## ÊÄªÁªì\n[ÁªìÊûÑÂåñÊÄªÁªì]`
          break
        default:
          mockResponse = `AIÂ¢ûÂº∫ÁªìÊûúÔºö\n\n${originalText}`
      }
      
      setEnhancedText(mockResponse)
    } catch (err) {
      setError('AIÂ¢ûÂº∫Â§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï')
      console.error('AI enhance error:', err)
    } finally {
      setLoading(false)
    }
  }

  // Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(enhancedText)
      // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÊàêÂäüÊèêÁ§∫
    } catch (err) {
      console.error('Copy failed:', err)
    }
  }

  // Â∫îÁî®Â¢ûÂº∫ÁªìÊûú
  const handleApply = () => {
    if (enhancedText && onApply) {
      onApply(enhancedText)
      onClose()
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-blue-500" />
            AIÊñáÊú¨Â¢ûÂº∫
          </DialogTitle>
        </DialogHeader>

        <div className="flex flex-col h-[70vh]">
          {/* ÊéßÂà∂Èù¢Êùø */}
          <div className="flex flex-wrap gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg mb-4">
            <div className="flex-1 min-w-48">
              <label className="block text-sm font-medium mb-2">Â¢ûÂº∫Ê®°Âºè</label>
              <Select value={selectedMode} onValueChange={setSelectedMode}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {enhanceModes.map(mode => {
                    const Icon = mode.icon
                    return (
                      <SelectItem key={mode.id} value={mode.id}>
                        <div className="flex items-center gap-2">
                          <Icon className="w-4 h-4" />
                          {mode.name}
                        </div>
                      </SelectItem>
                    )
                  })}
                </SelectContent>
              </Select>
              <p className="text-xs text-gray-500 mt-1">{currentMode?.description}</p>
            </div>

            <div className="flex-1 min-w-48">
              <label className="block text-sm font-medium mb-2">AIÊ®°Âûã</label>
              <Select value={selectedModel} onValueChange={setSelectedModel}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {models.map(model => (
                    <SelectItem key={model.id} value={model.id}>
                      <div className="flex items-center justify-between w-full">
                        <span>{model.name}</span>
                        <Badge variant="secondary" className="ml-2">
                          {model.provider}
                        </Badge>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-end">
              <Button 
                onClick={handleEnhance} 
                disabled={loading || !originalText.trim()}
                className="flex items-center gap-2"
              >
                {loading ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Sparkles className="w-4 h-4" />
                )}
                {loading ? 'Â¢ûÂº∫‰∏≠...' : 'ÂºÄÂßãÂ¢ûÂº∫'}
              </Button>
            </div>
          </div>

          {/* ÂÜÖÂÆπÂå∫Âüü */}
          <div className="flex-1 grid grid-cols-2 gap-4 overflow-hidden">
            {/* ÂéüÂßãÊñáÊú¨ */}
            <div className="flex flex-col">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium">ÂéüÂßãÊñáÊú¨</h3>
                <Badge variant="outline">{originalText.length} Â≠óÁ¨¶</Badge>
              </div>
              <Textarea
                value={originalText}
                readOnly
                className="flex-1 resize-none"
                placeholder="ÂéüÂßãÊñáÊú¨Â∞ÜÊòæÁ§∫Âú®ËøôÈáå..."
              />
            </div>

            {/* Â¢ûÂº∫ÁªìÊûú */}
            <div className="flex flex-col">
              <div className="flex items-center justify-between mb-2">
                <h3 className="font-medium">Â¢ûÂº∫ÁªìÊûú</h3>
                <div className="flex items-center gap-2">
                  {enhancedText && (
                    <>
                      <Badge variant="outline">{enhancedText.length} Â≠óÁ¨¶</Badge>
                      <Button size="sm" variant="outline" onClick={handleCopy}>
                        <Copy className="w-4 h-4" />
                      </Button>
                    </>
                  )}
                </div>
              </div>
              <Textarea
                value={enhancedText}
                onChange={(e) => setEnhancedText(e.target.value)}
                className="flex-1 resize-none"
                placeholder={loading ? "AIÊ≠£Âú®ÁîüÊàêÂ¢ûÂº∫ÂÜÖÂÆπ..." : "Â¢ûÂº∫ÁªìÊûúÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå..."}
                readOnly={loading}
              />
            </div>
          </div>

          {/* ÈîôËØØÊèêÁ§∫ */}
          {error && (
            <div className="mt-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
              <p className="text-red-600 dark:text-red-400 text-sm">{error}</p>
            </div>
          )}

          {/* Êìç‰ΩúÊåâÈíÆ */}
          <div className="flex justify-end gap-2 mt-4 pt-4 border-t">
            <Button variant="outline" onClick={onClose}>
              ÂèñÊ∂à
            </Button>
            <Button 
              onClick={handleApply} 
              disabled={!enhancedText}
              className="flex items-center gap-2"
            >
              <CheckCircle className="w-4 h-4" />
              Â∫îÁî®ÁªìÊûú
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default AIEnhanceModal

